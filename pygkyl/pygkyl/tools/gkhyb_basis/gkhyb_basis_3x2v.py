"""
GK Hybrid Basis Functions - 3x2v

Configuration space: [x,y,z]
Phase space: [x,y,z,vpar,mu]

Auto-generated by gkylcas/generate_gkhyb_python.mac
Date: 2025-10-15 21:22:10-04:00
"""

import numpy as np


def gkhyb_3x_conf(i, coords):
    x, y, z = coords
    if   i == 0: return 1/2**(3/2)
    elif i == 1: return (np.sqrt(3)*x)/2**(3/2)
    elif i == 2: return (np.sqrt(3)*y)/2**(3/2)
    elif i == 3: return (np.sqrt(3)*z)/2**(3/2)
    elif i == 4: return (3*x*y)/2**(3/2)
    elif i == 5: return (3*x*z)/2**(3/2)
    elif i == 6: return (3*y*z)/2**(3/2)
    elif i == 7: return (3**(3/2)*x*y*z)/2**(3/2)
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-7")

def grad_gkhyb_3x_conf(i, coords):
    x, y, z = coords
    if   i == 0: return np.array([0, 0, 0])
    elif i == 1: return np.array([np.sqrt(3)/2**(3/2), 0, 0])
    elif i == 2: return np.array([0, np.sqrt(3)/2**(3/2), 0])
    elif i == 3: return np.array([0, 0, np.sqrt(3)/2**(3/2)])
    elif i == 4: return np.array([(3*y)/2**(3/2), (3*x)/2**(3/2), 0])
    elif i == 5: return np.array([(3*z)/2**(3/2), 0, (3*x)/2**(3/2)])
    elif i == 6: return np.array([0, (3*z)/2**(3/2), (3*y)/2**(3/2)])
    elif i == 7: return np.array([(3**(3/2)*y*z)/2**(3/2), (3**(3/2)*x*z)/2**(3/2), (3**(3/2)*x*y)/2**(3/2)])
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-7")


def gkhyb_3x2v_phase(i, coords):
    x, y, z, vpar, mu = coords
    if   i == 0: return 1/2**(5/2)
    elif i == 1: return (np.sqrt(3)*x)/2**(5/2)
    elif i == 2: return (np.sqrt(3)*y)/2**(5/2)
    elif i == 3: return (np.sqrt(3)*z)/2**(5/2)
    elif i == 4: return (np.sqrt(3)*vpar)/2**(5/2)
    elif i == 5: return (np.sqrt(3)*mu)/2**(5/2)
    elif i == 6: return (3*x*y)/2**(5/2)
    elif i == 7: return (3*x*z)/2**(5/2)
    elif i == 8: return (3*y*z)/2**(5/2)
    elif i == 9: return (3*vpar*x)/2**(5/2)
    elif i == 10: return (3*vpar*y)/2**(5/2)
    elif i == 11: return (3*vpar*z)/2**(5/2)
    elif i == 12: return (3*mu*x)/2**(5/2)
    elif i == 13: return (3*mu*y)/2**(5/2)
    elif i == 14: return (3*mu*z)/2**(5/2)
    elif i == 15: return (3*mu*vpar)/2**(5/2)
    elif i == 16: return (3**(3/2)*x*y*z)/2**(5/2)
    elif i == 17: return (3**(3/2)*vpar*x*y)/2**(5/2)
    elif i == 18: return (3**(3/2)*vpar*x*z)/2**(5/2)
    elif i == 19: return (3**(3/2)*vpar*y*z)/2**(5/2)
    elif i == 20: return (3**(3/2)*mu*x*y)/2**(5/2)
    elif i == 21: return (3**(3/2)*mu*x*z)/2**(5/2)
    elif i == 22: return (3**(3/2)*mu*y*z)/2**(5/2)
    elif i == 23: return (3**(3/2)*mu*vpar*x)/2**(5/2)
    elif i == 24: return (3**(3/2)*mu*vpar*y)/2**(5/2)
    elif i == 25: return (3**(3/2)*mu*vpar*z)/2**(5/2)
    elif i == 26: return (9*vpar*x*y*z)/2**(5/2)
    elif i == 27: return (9*mu*x*y*z)/2**(5/2)
    elif i == 28: return (9*mu*vpar*x*y)/2**(5/2)
    elif i == 29: return (9*mu*vpar*x*z)/2**(5/2)
    elif i == 30: return (9*mu*vpar*y*z)/2**(5/2)
    elif i == 31: return (3**(5/2)*mu*vpar*x*y*z)/2**(5/2)
    elif i == 32: return (3*np.sqrt(5)*(vpar**2-1/3))/2**(7/2)
    elif i == 33: return (3*np.sqrt(15)*(vpar**2*x-x/3))/2**(7/2)
    elif i == 34: return (3*np.sqrt(15)*(vpar**2*y-y/3))/2**(7/2)
    elif i == 35: return (3*np.sqrt(15)*(vpar**2*z-z/3))/2**(7/2)
    elif i == 36: return (3*np.sqrt(15)*(mu*vpar**2-mu/3))/2**(7/2)
    elif i == 37: return (9*np.sqrt(5)*(vpar**2*x*y-(x*y)/3))/2**(7/2)
    elif i == 38: return (9*np.sqrt(5)*(vpar**2*x*z-(x*z)/3))/2**(7/2)
    elif i == 39: return (9*np.sqrt(5)*(vpar**2*y*z-(y*z)/3))/2**(7/2)
    elif i == 40: return (9*np.sqrt(5)*(mu*vpar**2*x-(mu*x)/3))/2**(7/2)
    elif i == 41: return (9*np.sqrt(5)*(mu*vpar**2*y-(mu*y)/3))/2**(7/2)
    elif i == 42: return (9*np.sqrt(5)*(mu*vpar**2*z-(mu*z)/3))/2**(7/2)
    elif i == 43: return (9*np.sqrt(15)*(vpar**2*x*y*z-(x*y*z)/3))/2**(7/2)
    elif i == 44: return (9*np.sqrt(15)*(mu*vpar**2*x*y-(mu*x*y)/3))/2**(7/2)
    elif i == 45: return (9*np.sqrt(15)*(mu*vpar**2*x*z-(mu*x*z)/3))/2**(7/2)
    elif i == 46: return (9*np.sqrt(15)*(mu*vpar**2*y*z-(mu*y*z)/3))/2**(7/2)
    elif i == 47: return (27*np.sqrt(5)*(mu*vpar**2*x*y*z-(mu*x*y*z)/3))/2**(7/2)
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-47")

def grad_gkhyb_3x2v_phase(i, coords):
    x, y, z, vpar, mu = coords
    if   i == 0: return np.array([0, 0, 0, 0, 0])
    elif i == 1: return np.array([np.sqrt(3)/2**(5/2), 0, 0, 0, 0])
    elif i == 2: return np.array([0, np.sqrt(3)/2**(5/2), 0, 0, 0])
    elif i == 3: return np.array([0, 0, np.sqrt(3)/2**(5/2), 0, 0])
    elif i == 4: return np.array([0, 0, 0, np.sqrt(3)/2**(5/2), 0])
    elif i == 5: return np.array([0, 0, 0, 0, np.sqrt(3)/2**(5/2)])
    elif i == 6: return np.array([(3*y)/2**(5/2), (3*x)/2**(5/2), 0, 0, 0])
    elif i == 7: return np.array([(3*z)/2**(5/2), 0, (3*x)/2**(5/2), 0, 0])
    elif i == 8: return np.array([0, (3*z)/2**(5/2), (3*y)/2**(5/2), 0, 0])
    elif i == 9: return np.array([(3*vpar)/2**(5/2), 0, 0, (3*x)/2**(5/2), 0])
    elif i == 10: return np.array([0, (3*vpar)/2**(5/2), 0, (3*y)/2**(5/2), 0])
    elif i == 11: return np.array([0, 0, (3*vpar)/2**(5/2), (3*z)/2**(5/2), 0])
    elif i == 12: return np.array([(3*mu)/2**(5/2), 0, 0, 0, (3*x)/2**(5/2)])
    elif i == 13: return np.array([0, (3*mu)/2**(5/2), 0, 0, (3*y)/2**(5/2)])
    elif i == 14: return np.array([0, 0, (3*mu)/2**(5/2), 0, (3*z)/2**(5/2)])
    elif i == 15: return np.array([0, 0, 0, (3*mu)/2**(5/2), (3*vpar)/2**(5/2)])
    elif i == 16: return np.array([(3**(3/2)*y*z)/2**(5/2), (3**(3/2)*x*z)/2**(5/2), (3**(3/2)*x*y)/2**(5/2), 0, 0])
    elif i == 17: return np.array([(3**(3/2)*vpar*y)/2**(5/2), (3**(3/2)*vpar*x)/2**(5/2), 0, (3**(3/2)*x*y)/2**(5/2), 0])
    elif i == 18: return np.array([(3**(3/2)*vpar*z)/2**(5/2), 0, (3**(3/2)*vpar*x)/2**(5/2), (3**(3/2)*x*z)/2**(5/2), 0])
    elif i == 19: return np.array([0, (3**(3/2)*vpar*z)/2**(5/2), (3**(3/2)*vpar*y)/2**(5/2), (3**(3/2)*y*z)/2**(5/2), 0])
    elif i == 20: return np.array([(3**(3/2)*mu*y)/2**(5/2), (3**(3/2)*mu*x)/2**(5/2), 0, 0, (3**(3/2)*x*y)/2**(5/2)])
    elif i == 21: return np.array([(3**(3/2)*mu*z)/2**(5/2), 0, (3**(3/2)*mu*x)/2**(5/2), 0, (3**(3/2)*x*z)/2**(5/2)])
    elif i == 22: return np.array([0, (3**(3/2)*mu*z)/2**(5/2), (3**(3/2)*mu*y)/2**(5/2), 0, (3**(3/2)*y*z)/2**(5/2)])
    elif i == 23: return np.array([(3**(3/2)*mu*vpar)/2**(5/2), 0, 0, (3**(3/2)*mu*x)/2**(5/2), (3**(3/2)*vpar*x)/2**(5/2)])
    elif i == 24: return np.array([0, (3**(3/2)*mu*vpar)/2**(5/2), 0, (3**(3/2)*mu*y)/2**(5/2), (3**(3/2)*vpar*y)/2**(5/2)])
    elif i == 25: return np.array([0, 0, (3**(3/2)*mu*vpar)/2**(5/2), (3**(3/2)*mu*z)/2**(5/2), (3**(3/2)*vpar*z)/2**(5/2)])
    elif i == 26: return np.array([(9*vpar*y*z)/2**(5/2), (9*vpar*x*z)/2**(5/2), (9*vpar*x*y)/2**(5/2), (9*x*y*z)/2**(5/2), 0])
    elif i == 27: return np.array([(9*mu*y*z)/2**(5/2), (9*mu*x*z)/2**(5/2), (9*mu*x*y)/2**(5/2), 0, (9*x*y*z)/2**(5/2)])
    elif i == 28: return np.array([(9*mu*vpar*y)/2**(5/2), (9*mu*vpar*x)/2**(5/2), 0, (9*mu*x*y)/2**(5/2), (9*vpar*x*y)/2**(5/2)])
    elif i == 29: return np.array([(9*mu*vpar*z)/2**(5/2), 0, (9*mu*vpar*x)/2**(5/2), (9*mu*x*z)/2**(5/2), (9*vpar*x*z)/2**(5/2)])
    elif i == 30: return np.array([0, (9*mu*vpar*z)/2**(5/2), (9*mu*vpar*y)/2**(5/2), (9*mu*y*z)/2**(5/2), (9*vpar*y*z)/2**(5/2)])
    elif i == 31: return np.array([(3**(5/2)*mu*vpar*y*z)/2**(5/2), (3**(5/2)*mu*vpar*x*z)/2**(5/2), (3**(5/2)*mu*vpar*x*y)/2**(5/2), (3**(5/2)*mu*x*y*z)/2**(5/2), (3**(5/2)*vpar*x*y*z)/2**(5/2)])
    elif i == 32: return np.array([0, 0, 0, (3*np.sqrt(5)*vpar)/2**(5/2), 0])
    elif i == 33: return np.array([(3*np.sqrt(15)*(vpar**2-1/3))/2**(7/2), 0, 0, (3*np.sqrt(15)*vpar*x)/2**(5/2), 0])
    elif i == 34: return np.array([0, (3*np.sqrt(15)*(vpar**2-1/3))/2**(7/2), 0, (3*np.sqrt(15)*vpar*y)/2**(5/2), 0])
    elif i == 35: return np.array([0, 0, (3*np.sqrt(15)*(vpar**2-1/3))/2**(7/2), (3*np.sqrt(15)*vpar*z)/2**(5/2), 0])
    elif i == 36: return np.array([0, 0, 0, (3*np.sqrt(15)*mu*vpar)/2**(5/2), (3*np.sqrt(15)*(vpar**2-1/3))/2**(7/2)])
    elif i == 37: return np.array([(9*np.sqrt(5)*(vpar**2*y-y/3))/2**(7/2), (9*np.sqrt(5)*(vpar**2*x-x/3))/2**(7/2), 0, (9*np.sqrt(5)*vpar*x*y)/2**(5/2), 0])
    elif i == 38: return np.array([(9*np.sqrt(5)*(vpar**2*z-z/3))/2**(7/2), 0, (9*np.sqrt(5)*(vpar**2*x-x/3))/2**(7/2), (9*np.sqrt(5)*vpar*x*z)/2**(5/2), 0])
    elif i == 39: return np.array([0, (9*np.sqrt(5)*(vpar**2*z-z/3))/2**(7/2), (9*np.sqrt(5)*(vpar**2*y-y/3))/2**(7/2), (9*np.sqrt(5)*vpar*y*z)/2**(5/2), 0])
    elif i == 40: return np.array([(9*np.sqrt(5)*(mu*vpar**2-mu/3))/2**(7/2), 0, 0, (9*np.sqrt(5)*mu*vpar*x)/2**(5/2), (9*np.sqrt(5)*(vpar**2*x-x/3))/2**(7/2)])
    elif i == 41: return np.array([0, (9*np.sqrt(5)*(mu*vpar**2-mu/3))/2**(7/2), 0, (9*np.sqrt(5)*mu*vpar*y)/2**(5/2), (9*np.sqrt(5)*(vpar**2*y-y/3))/2**(7/2)])
    elif i == 42: return np.array([0, 0, (9*np.sqrt(5)*(mu*vpar**2-mu/3))/2**(7/2), (9*np.sqrt(5)*mu*vpar*z)/2**(5/2), (9*np.sqrt(5)*(vpar**2*z-z/3))/2**(7/2)])
    elif i == 43: return np.array([(9*np.sqrt(15)*(vpar**2*y*z-(y*z)/3))/2**(7/2), (9*np.sqrt(15)*(vpar**2*x*z-(x*z)/3))/2**(7/2), (9*np.sqrt(15)*(vpar**2*x*y-(x*y)/3))/2**(7/2), (9*np.sqrt(15)*vpar*x*y*z)/2**(5/2), 0])
    elif i == 44: return np.array([(9*np.sqrt(15)*(mu*vpar**2*y-(mu*y)/3))/2**(7/2), (9*np.sqrt(15)*(mu*vpar**2*x-(mu*x)/3))/2**(7/2), 0, (9*np.sqrt(15)*mu*vpar*x*y)/2**(5/2), (9*np.sqrt(15)*(vpar**2*x*y-(x*y)/3))/2**(7/2)])
    elif i == 45: return np.array([(9*np.sqrt(15)*(mu*vpar**2*z-(mu*z)/3))/2**(7/2), 0, (9*np.sqrt(15)*(mu*vpar**2*x-(mu*x)/3))/2**(7/2), (9*np.sqrt(15)*mu*vpar*x*z)/2**(5/2), (9*np.sqrt(15)*(vpar**2*x*z-(x*z)/3))/2**(7/2)])
    elif i == 46: return np.array([0, (9*np.sqrt(15)*(mu*vpar**2*z-(mu*z)/3))/2**(7/2), (9*np.sqrt(15)*(mu*vpar**2*y-(mu*y)/3))/2**(7/2), (9*np.sqrt(15)*mu*vpar*y*z)/2**(5/2), (9*np.sqrt(15)*(vpar**2*y*z-(y*z)/3))/2**(7/2)])
    elif i == 47: return np.array([(27*np.sqrt(5)*(mu*vpar**2*y*z-(mu*y*z)/3))/2**(7/2), (27*np.sqrt(5)*(mu*vpar**2*x*z-(mu*x*z)/3))/2**(7/2), (27*np.sqrt(5)*(mu*vpar**2*x*y-(mu*x*y)/3))/2**(7/2), (27*np.sqrt(5)*mu*vpar*x*y*z)/2**(5/2), (27*np.sqrt(5)*(vpar**2*x*y*z-(x*y*z)/3))/2**(7/2)])
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-47")


def num_basis_3x_conf():
    """Return number of 3x configuration space basis functions."""
    return 8


def num_basis_3x2v_phase():
    """Return number of 3x2v phase space basis functions."""
    return 48


# Legacy function names for backwards compatibility
def num_basis_conf():
    """Return number of configuration space basis functions."""
    return num_basis_3x_conf()


def num_basis_phase():
    """Return number of phase space basis functions."""
    return num_basis_3x2v_phase()


def eval_all_conf(coords):
    """Evaluate all configuration space basis functions at given coordinates."""
    return np.array([gkhyb_3x_conf(i, coords) for i in range(8)])


def eval_all_phase(coords):
    """Evaluate all phase space basis functions at given coordinates."""
    return np.array([gkhyb_3x2v_phase(i, coords) for i in range(48)])

def weak_mult_3x_ser_p1(f, g):
    shape = f.shape
    for cidx in np.ndindex(shape[:-1]):
        f[cidx] = weak_mult_3x_ser_p1_kernel(f[cidx], g[cidx])
        
def weak_mult_3x2v_gkhyb_p1(f, g):
    shape = f.shape
    for cidx in np.ndindex(shape[:-1]):
        f[cidx] = weak_mult_3x2v_gkhyb_p1_kernel(f[cidx], g[cidx])

def weak_mult_3x_ser_p1_kernel(f, g):
    c = 0.3535533905932737  # 1/sqrt(8)
    tmp = np.zeros(8)
    tmp[0] = c*g[4]*f[4]+c*f[1]*g[1]+c*f[2]*g[2]+c*g[5]*f[5]+c*f[0]*g[0]+c*g[7]*f[7]+c*g[6]*f[6]+c*f[3]*g[3]
    tmp[1] = c*f[1]*g[0]+c*f[0]*g[1]+c*f[5]*g[3]+c*f[4]*g[2]+c*g[4]*f[2]+c*g[7]*f[6]+c*g[5]*f[3]+c*g[6]*f[7]
    tmp[2] = c*g[5]*f[7]+c*f[1]*g[4]+c*g[6]*f[3]+c*f[4]*g[1]+c*f[6]*g[3]+c*f[0]*g[2]+c*g[7]*f[5]+c*f[2]*g[0]
    tmp[3] = c*g[6]*f[2]+c*f[3]*g[0]+c*g[4]*f[7]+c*f[1]*g[5]+c*g[1]*f[5]+c*g[7]*f[4]+c*f[6]*g[2]+c*f[0]*g[3]
    tmp[4] = c*g[5]*f[6]+c*g[7]*f[3]+c*g[4]*f[0]+c*g[6]*f[5]+c*f[4]*g[0]+c*f[2]*g[1]+c*f[7]*g[3]+c*f[1]*g[2]
    tmp[5] = c*f[0]*g[5]+c*g[4]*f[6]+c*g[7]*f[2]+c*f[3]*g[1]+c*f[7]*g[2]+c*g[6]*f[4]+c*f[1]*g[3]+c*f[5]*g[0]
    tmp[6] = c*g[4]*f[5]+c*f[1]*g[7]+c*f[6]*g[0]+c*f[0]*g[6]+c*g[5]*f[4]+c*f[7]*g[1]+c*f[2]*g[3]+c*f[3]*g[2]
    tmp[7] = c*f[1]*g[6]+c*f[6]*g[1]+c*f[4]*g[3]+c*f[5]*g[2]+c*f[7]*g[0]+c*f[0]*g[7]+c*g[5]*f[2]+c*g[4]*f[3]
    return tmp


def weak_mult_3x2v_gkhyb_p1_kernel(f, g):
    c = 0.3535533905932737  # 1/sqrt(8)
    tmp = np.zeros(48)
    tmp[0] = c*f[7]*g[16]+c*f[6]*g[8]+c*f[5]*g[7]+c*f[4]*g[6]+c*f[3]*g[3]+c*f[2]*g[2]+c*f[1]*g[1]+c*f[0]*g[0]
    tmp[1] = c*f[6]*g[16]+c*f[7]*g[8]+c*f[3]*g[7]+c*f[2]*g[6]+c*g[3]*f[5]+c*g[2]*f[4]+c*f[0]*g[1]+c*g[0]*f[1]
    tmp[2] = c*f[5]*g[16]+c*f[3]*g[8]+c*f[7]*g[7]+c*f[1]*g[6]+c*g[3]*f[6]+c*g[1]*f[4]+c*f[0]*g[2]+c*g[0]*f[2]
    tmp[3] = c*f[4]*g[16]+c*f[2]*g[8]+c*f[1]*g[7]+c*g[6]*f[7]+c*g[2]*f[6]+c*g[1]*f[5]+c*f[0]*g[3]+c*g[0]*f[3]
    tmp[4] = c*f[7]*g[26]+c*f[6]*g[19]+c*f[5]*g[18]+c*f[4]*g[17]+c*f[3]*g[11]+c*f[2]*g[10]+c*f[1]*g[9]+c*f[0]*g[4]
    tmp[5] = c*f[7]*g[27]+c*f[6]*g[22]+c*f[5]*g[21]+c*f[4]*g[20]+c*f[3]*g[14]+c*f[2]*g[13]+c*f[1]*g[12]+c*f[0]*g[5]
    tmp[6] = c*f[3]*g[16]+c*f[5]*g[8]+c*f[6]*g[7]+c*g[3]*f[7]+c*f[0]*g[6]+c*g[0]*f[4]+c*f[1]*g[2]+c*g[1]*f[2]
    tmp[7] = c*f[2]*g[16]+c*f[4]*g[8]+c*f[0]*g[7]+c*g[2]*f[7]+c*f[6]*g[6]+c*g[0]*f[5]+c*f[1]*g[3]+c*g[1]*f[3]
    tmp[8] = c*f[1]*g[16]+c*f[0]*g[8]+c*f[4]*g[7]+c*g[1]*f[7]+c*f[5]*g[6]+c*g[0]*f[6]+c*f[2]*g[3]+c*g[2]*f[3]
    tmp[9] = c*f[6]*g[26]+c*f[7]*g[19]+c*f[3]*g[18]+c*f[2]*g[17]+c*f[5]*g[11]+c*f[4]*g[10]+c*f[0]*g[9]+c*f[1]*g[4]
    tmp[10] = c*f[5]*g[26]+c*f[3]*g[19]+c*f[7]*g[18]+c*f[1]*g[17]+c*f[6]*g[11]+c*f[0]*g[10]+c*f[4]*g[9]+c*f[2]*g[4]
    tmp[11] = c*f[4]*g[26]+c*f[2]*g[19]+c*f[1]*g[18]+c*f[7]*g[17]+c*f[0]*g[11]+c*f[6]*g[10]+c*f[5]*g[9]+c*f[3]*g[4]
    tmp[12] = c*f[6]*g[27]+c*f[7]*g[22]+c*f[3]*g[21]+c*f[2]*g[20]+c*f[5]*g[14]+c*f[4]*g[13]+c*f[0]*g[12]+c*f[1]*g[5]
    tmp[13] = c*f[5]*g[27]+c*f[3]*g[22]+c*f[7]*g[21]+c*f[1]*g[20]+c*f[6]*g[14]+c*f[0]*g[13]+c*f[4]*g[12]+c*f[2]*g[5]
    tmp[14] = c*f[4]*g[27]+c*f[2]*g[22]+c*f[1]*g[21]+c*f[7]*g[20]+c*f[0]*g[14]+c*f[6]*g[13]+c*f[5]*g[12]+c*f[3]*g[5]
    tmp[15] = c*f[7]*g[31]+c*f[6]*g[30]+c*f[5]*g[29]+c*f[4]*g[28]+c*f[3]*g[25]+c*f[2]*g[24]+c*f[1]*g[23]+c*f[0]*g[15]
    tmp[16] = c*f[0]*g[16]+c*f[1]*g[8]+c*f[2]*g[7]+c*g[0]*f[7]+c*f[3]*g[6]+c*g[1]*f[6]+c*g[2]*f[5]+c*g[3]*f[4]
    tmp[17] = c*f[3]*g[26]+c*f[5]*g[19]+c*f[6]*g[18]+c*f[0]*g[17]+c*f[7]*g[11]+c*f[1]*g[10]+c*f[2]*g[9]+c*f[4]*g[4]
    tmp[18] = c*f[2]*g[26]+c*f[4]*g[19]+c*f[0]*g[18]+c*f[6]*g[17]+c*f[1]*g[11]+c*f[7]*g[10]+c*f[3]*g[9]+c*g[4]*f[5]
    tmp[19] = c*f[1]*g[26]+c*f[0]*g[19]+c*f[4]*g[18]+c*f[5]*g[17]+c*f[2]*g[11]+c*f[3]*g[10]+c*f[7]*g[9]+c*g[4]*f[6]
    tmp[20] = c*f[3]*g[27]+c*f[5]*g[22]+c*f[6]*g[21]+c*f[0]*g[20]+c*f[7]*g[14]+c*f[1]*g[13]+c*f[2]*g[12]+c*f[4]*g[5]
    tmp[21] = c*f[2]*g[27]+c*f[4]*g[22]+c*f[0]*g[21]+c*f[6]*g[20]+c*f[1]*g[14]+c*f[7]*g[13]+c*f[3]*g[12]+c*f[5]*g[5]
    tmp[22] = c*f[1]*g[27]+c*f[0]*g[22]+c*f[4]*g[21]+c*f[5]*g[20]+c*f[2]*g[14]+c*f[3]*g[13]+c*f[7]*g[12]+c*g[5]*f[6]
    tmp[23] = c*f[6]*g[31]+c*f[7]*g[30]+c*f[3]*g[29]+c*f[2]*g[28]+c*f[5]*g[25]+c*f[4]*g[24]+c*f[0]*g[23]+c*f[1]*g[15]
    tmp[24] = c*f[5]*g[31]+c*f[3]*g[30]+c*f[7]*g[29]+c*f[1]*g[28]+c*f[6]*g[25]+c*f[0]*g[24]+c*f[4]*g[23]+c*f[2]*g[15]
    tmp[25] = c*f[4]*g[31]+c*f[2]*g[30]+c*f[1]*g[29]+c*f[7]*g[28]+c*f[0]*g[25]+c*f[6]*g[24]+c*f[5]*g[23]+c*f[3]*g[15]
    tmp[26] = c*f[0]*g[26]+c*f[1]*g[19]+c*f[2]*g[18]+c*f[3]*g[17]+c*f[4]*g[11]+c*f[5]*g[10]+c*f[6]*g[9]+c*g[4]*f[7]
    tmp[27] = c*f[0]*g[27]+c*f[1]*g[22]+c*f[2]*g[21]+c*f[3]*g[20]+c*f[4]*g[14]+c*f[5]*g[13]+c*f[6]*g[12]+c*g[5]*f[7]
    tmp[28] = c*f[3]*g[31]+c*f[5]*g[30]+c*f[6]*g[29]+c*f[0]*g[28]+c*f[7]*g[25]+c*f[1]*g[24]+c*f[2]*g[23]+c*f[4]*g[15]
    tmp[29] = c*f[2]*g[31]+c*f[4]*g[30]+c*f[0]*g[29]+c*f[6]*g[28]+c*f[1]*g[25]+c*f[7]*g[24]+c*f[3]*g[23]+c*f[5]*g[15]
    tmp[30] = c*f[1]*g[31]+c*f[0]*g[30]+c*f[4]*g[29]+c*f[5]*g[28]+c*f[2]*g[25]+c*f[3]*g[24]+c*f[7]*g[23]+c*f[6]*g[15]
    tmp[31] = c*f[0]*g[31]+c*f[1]*g[30]+c*f[2]*g[29]+c*f[3]*g[28]+c*f[4]*g[25]+c*f[5]*g[24]+c*f[6]*g[23]+c*f[7]*g[15]
    tmp[32] = c*f[7]*g[43]+c*f[6]*g[39]+c*f[5]*g[38]+c*f[4]*g[37]+c*f[3]*g[35]+c*f[2]*g[34]+c*f[1]*g[33]+c*f[0]*g[32]
    tmp[33] = c*f[6]*g[43]+c*f[7]*g[39]+c*f[3]*g[38]+c*f[2]*g[37]+c*f[5]*g[35]+c*f[4]*g[34]+c*f[0]*g[33]+c*f[1]*g[32]
    tmp[34] = c*f[5]*g[43]+c*f[3]*g[39]+c*f[7]*g[38]+c*f[1]*g[37]+c*f[6]*g[35]+c*f[0]*g[34]+c*f[4]*g[33]+c*f[2]*g[32]
    tmp[35] = c*f[4]*g[43]+c*f[2]*g[39]+c*f[1]*g[38]+c*f[7]*g[37]+c*f[0]*g[35]+c*f[6]*g[34]+c*f[5]*g[33]+c*f[3]*g[32]
    tmp[36] = c*f[7]*g[47]+c*f[6]*g[46]+c*f[5]*g[45]+c*f[4]*g[44]+c*f[3]*g[42]+c*f[2]*g[41]+c*f[1]*g[40]+c*f[0]*g[36]
    tmp[37] = c*f[3]*g[43]+c*f[5]*g[39]+c*f[6]*g[38]+c*f[0]*g[37]+c*f[7]*g[35]+c*f[1]*g[34]+c*f[2]*g[33]+c*f[4]*g[32]
    tmp[38] = c*f[2]*g[43]+c*f[4]*g[39]+c*f[0]*g[38]+c*f[6]*g[37]+c*f[1]*g[35]+c*f[7]*g[34]+c*f[3]*g[33]+c*f[5]*g[32]
    tmp[39] = c*f[1]*g[43]+c*f[0]*g[39]+c*f[4]*g[38]+c*f[5]*g[37]+c*f[2]*g[35]+c*f[3]*g[34]+c*f[7]*g[33]+c*f[6]*g[32]
    tmp[40] = c*f[6]*g[47]+c*f[7]*g[46]+c*f[3]*g[45]+c*f[2]*g[44]+c*f[5]*g[42]+c*f[4]*g[41]+c*f[0]*g[40]+c*f[1]*g[36]
    tmp[41] = c*f[5]*g[47]+c*f[3]*g[46]+c*f[7]*g[45]+c*f[1]*g[44]+c*f[6]*g[42]+c*f[0]*g[41]+c*f[4]*g[40]+c*f[2]*g[36]
    tmp[42] = c*f[4]*g[47]+c*f[2]*g[46]+c*f[1]*g[45]+c*f[7]*g[44]+c*f[0]*g[42]+c*f[6]*g[41]+c*f[5]*g[40]+c*f[3]*g[36]
    tmp[43] = c*f[0]*g[43]+c*f[1]*g[39]+c*f[2]*g[38]+c*f[3]*g[37]+c*f[4]*g[35]+c*f[5]*g[34]+c*f[6]*g[33]+c*f[7]*g[32]
    tmp[44] = c*f[3]*g[47]+c*f[5]*g[46]+c*f[6]*g[45]+c*f[0]*g[44]+c*f[7]*g[42]+c*f[1]*g[41]+c*f[2]*g[40]+c*f[4]*g[36]
    tmp[45] = c*f[2]*g[47]+c*f[4]*g[46]+c*f[0]*g[45]+c*f[6]*g[44]+c*f[1]*g[42]+c*f[7]*g[41]+c*f[3]*g[40]+c*f[5]*g[36]
    tmp[46] = c*f[1]*g[47]+c*f[0]*g[46]+c*f[4]*g[45]+c*f[5]*g[44]+c*f[2]*g[42]+c*f[3]*g[41]+c*f[7]*g[40]+c*f[6]*g[36]
    tmp[47] = c*f[0]*g[47]+c*f[1]*g[46]+c*f[2]*g[45]+c*f[3]*g[44]+c*f[4]*g[42]+c*f[5]*g[41]+c*f[6]*g[40]+c*f[7]*g[36]
    return tmp


if __name__ == "__main__":
    # Example usage
    print(f"GK Hybrid Basis 3x2v")
    print(f"Configuration space basis functions: {num_basis_conf()}")
    print(f"Phase space basis functions: {num_basis_phase()}")
    print() 