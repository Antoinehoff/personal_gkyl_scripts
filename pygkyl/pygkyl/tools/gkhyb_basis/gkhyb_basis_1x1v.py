"""
GK Hybrid Basis Functions - 1x1v

Configuration space: [x]
Phase space: [x,vpar]

Auto-generated by gkylcas/generate_gkhyb_python.mac
Date: 2025-10-15 21:22:10-04:00
"""

import numpy as np


def gkhyb_1x_conf(i, coords):
    """
    GK Hybrid basis function evaluation.
    
    Parameters:
    -----------
    i : int
        Basis function index (0 to 1)
    coords : tuple or array
        Coordinates (x)
    
    Returns:
    --------
    float
        Value of basis function φ[i] at the given coordinates
    """
    x = coords[0] if hasattr(coords, '__len__') else coords
    
    if   i == 0: return 1/np.sqrt(2)
    elif i == 1: return (np.sqrt(3)*x)/np.sqrt(2)
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-1")

def grad_gkhyb_1x_conf(i, coords):
    """
    Gradient of basis function φ[i] as numpy array.
    Returns: numpy array of shape (1,)
    """
    x = coords[0] if hasattr(coords, '__len__') else coords
    
    if   i == 0: return np.array([0])
    elif i == 1: return np.array([np.sqrt(3)/np.sqrt(2)])
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-1")


def gkhyb_1x1v_phase(i, coords):
    """
    GK Hybrid basis function evaluation.
    
    Parameters:
    -----------
    i : int
        Basis function index (0 to 5)
    coords : tuple or array
        Coordinates (x, vpar)
    
    Returns:
    --------
    float
        Value of basis function φ[i] at the given coordinates
    """
    x, vpar = coords
    
    if   i == 0: return 1/2
    elif i == 1: return (np.sqrt(3)*x)/2
    elif i == 2: return (np.sqrt(3)*vpar)/2
    elif i == 3: return (3*vpar*x)/2
    elif i == 4: return (3*np.sqrt(5)*(vpar**2-1/3))/4
    elif i == 5: return (3*np.sqrt(15)*(vpar**2*x-x/3))/4
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-5")

def grad_gkhyb_1x1v_phase(i, coords):
    """
    Gradient of basis function φ[i] as numpy array.
    Returns: numpy array of shape (2,)
    """
    x, vpar = coords
    
    if   i == 0: return np.array([0, 0])
    elif i == 1: return np.array([np.sqrt(3)/2, 0])
    elif i == 2: return np.array([0, np.sqrt(3)/2])
    elif i == 3: return np.array([(3*vpar)/2, (3*x)/2])
    elif i == 4: return np.array([0, (3*np.sqrt(5)*vpar)/2])
    elif i == 5: return np.array([(3*np.sqrt(15)*(vpar**2-1/3))/4, (3*np.sqrt(15)*vpar*x)/2])
    else: raise ValueError(f"Invalid basis function index: {i}. Valid range: 0-5")


def num_basis_1x1v_conf():
    """Return number of configuration space basis functions."""
    return 2


def num_basis_1x1v_phase():
    """Return number of phase space basis functions."""
    return 6


def eval_all_conf(coords):
    """Evaluate all configuration space basis functions at given coordinates."""
    return np.array([gkhyb_1x_conf(i, coords) for i in range(2)])


def eval_all_phase(coords):
    """Evaluate all phase space basis functions at given coordinates."""
    return np.array([gkhyb_1x1v_phase(i, coords) for i in range(6)])


if __name__ == "__main__":
    # Example usage
    print(f"GK Hybrid Basis 1x1v")
    print(f"Configuration space basis functions: {num_basis_1x1v_conf()}")
    print(f"Phase space basis functions: {num_basis_1x1v_phase()}")
    print()
    
    # Add your test code here
    pass
